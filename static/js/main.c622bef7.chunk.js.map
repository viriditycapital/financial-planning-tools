{"version":3,"sources":["Nav.js","Home.js","compound-interest/calc.js","compound-interest/CompoundInterestGraph.js","compound-interest/CompoundInterestTable.js","compound-interest/CompoundInterest.js","buy-vs-rent/BVRTable.js","buy-vs-rent/BuyVsRent.js","App.js","reportWebVitals.js","index.js"],"names":["Nav","className","this","global","nav","onClick","setGlobal","Component","Home","periods_per_year","daily","weekly","biweekly","monthly","quarter","annually","calc_compound_interest_table","initial_amount","interest_rate","inflation_rate","num_years","recurring_investments","recurring_investment_periods","compound_interest_data","push","year","period","amount_invested","value","returns","amount_invested_in_todays_dollars","value_in_todays_dollars","returns_in_todays_dollars","end_of_year","current_amount_invested","current_value","current_amount_invested_in_todays_dollars","inflation_multiplier","recurring_investments_combined","i","length","recurring_investment","recurring_investment_period","ppy","increment_amount","curr_period","Math","floor","amount","sort","a","b","folded","interest_rate_delta","deflated_current_value","current_amount","current_value_in_todays_dollars","options","title","display","text","fontSize","fontFamily","scales","xAxes","scaleLabel","labelString","ticks","yAxes","beginAtZero","callback","index","values","CompoundInterestTable","props","datasets","label","data","map","d","round","fill","backgroundColor","borderColor","display_detail_inflation","borderWidth","pointRadius","pointStyle","labels","usd_formatter","Intl","NumberFormat","style","currency","maximumFractionDigits","pct_formatter","minimumFractionDigits","format","display_detail_period","CompoundInterest","calc","bind","update_value","toggle_value","addRecurringInvestment","removeRecurringInvestment","state","undefined","setState","investment","key","prevState","filter","_","type","defaultValue","onChange","e","Number","target","updateValue","CompoundInterestGraph","BVRTable","mortgageData","rent","buyCosts","equityRent","equityBuy","riskFree","income","taxRate","id","rows","monthlyIncome","balance","roeRent","roeBuy","renderTableRows","BuyVsRent","useState","equity","setEquity","setRiskFree","numYears","setNumYears","setIncome","setTaxRate","setRent","rentersInsurance","setRentersInsurance","price","setPrice","down","setDown","tax","setTax","cc","setCC","mortgageRate","setMortgageRate","mortgageLoanTerm","setMortgageLoanTerm","isCondo","setIsCondo","getClosingCosts","useCallback","total","mortgageAmount","judgmentLienSearch","closing","setClosing","calculateMortgage","isRent","monthlyInterestRate","totalPayments","principal","monthlyPayment","pow","payments","interest","mortgage","setMortgage","monthlyMortgage","getRentCost","getBuyCost","rentCost","setRentCost","buyCost","setBuyCost","useEffect","parseInt","disabled","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c622bef7.chunk.js","sourcesContent":["import { React, Component } from 'reactn';\nimport \"./Nav.css\"\n\nclass Nav extends Component {\n  render() {\n    return (\n      <div className=\"side-bar\">\n        <nav className=\"side-nav\">\n          <ul className=\"nav-list\">\n            <li className={this.global.nav === \"Home\" ? \"selected-nav\" : \"\"}\n              onClick={() => this.setGlobal({ nav: \"Home\" })}>\n              <a>Home</a></li>\n            <li className={this.global.nav === \"CompoundInterest\" ? \"selected-nav\" : \"\"}\n              onClick={() => this.setGlobal({ nav: \"CompoundInterest\" })}>\n              <a>Compound Interest</a></li>\n            <li className={this.global.nav === \"Buy vs. Rent\" ? \"selected-nav\" : \"\"}\n              onClick={() => this.setGlobal({ nav: \"BuyVsRent\" })}>\n              <a>Buy vs. Rent</a></li>\n          </ul>\n        </nav>\n      </div>\n    );\n  }\n}\n\nexport default Nav","import { React, Component } from 'reactn';\n\nclass Home extends Component {\n  render() {\n    return (\n      <div className=\"main-content\">\n        <h1>Viridity Financial Planning Tools</h1>\n\n        <p>Welcome to Viridity's very aesthetic financial planning tools. Use these to get rich. This is not intended to be investment advice.</p>\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","var periods_per_year = {\n  daily: 365,\n  weekly: 52,\n  biweekly: 26,\n  monthly: 12,\n  quarter: 4,\n  annually: 1,\n};\n\nvar month_name = [\n  \"Jan\",\n  \"Feb\",\n  \"Mar\",\n  \"Apr\",\n  \"May\",\n  \"Jun\",\n  \"Jul\",\n  \"Aug\",\n  \"Sep\",\n  \"Oct\",\n  \"Nov\",\n  \"Dec\",\n];\n\nexport default function calc_compound_interest_table(\n  initial_amount = 0,\n  interest_rate = 0.1,\n  inflation_rate = 0.03,\n  num_years = 50,\n  recurring_investments = [0],\n  recurring_investment_periods = [\"annually\"]\n) {\n  let compound_interest_data = [];\n  compound_interest_data.push({\n    year: \"-\",\n    period: \"-\",\n    amount_invested: initial_amount,\n    value: initial_amount,\n    returns: 0,\n    amount_invested_in_todays_dollars: initial_amount,\n    value_in_todays_dollars: initial_amount,\n    returns_in_todays_dollars: 0,\n    end_of_year: true,\n  });\n\n  let current_amount_invested = initial_amount;\n  let current_value = initial_amount;\n  let current_amount_invested_in_todays_dollars = initial_amount;\n\n  let inflation_multiplier = 1;\n  let period = 0;\n\n  for (let year = 1; year <= num_years; year++) {\n    let recurring_investments_combined = [];\n\n    for (let i = 0; i < recurring_investments.length; i++) {\n      // Iterate over investments\n      const recurring_investment = recurring_investments[i];\n      const recurring_investment_period = recurring_investment_periods[i];\n      const ppy = periods_per_year[recurring_investment_period];\n\n      const increment_amount = 365 / ppy;\n      let curr_period = 0;\n      // Combine all recurring investments\n      for (let period = 1; period <= ppy; period++) {\n        recurring_investments_combined.push({\n          period: Math.floor(curr_period),\n          amount: recurring_investment,\n        });\n        curr_period += increment_amount;\n      }\n    }\n\n    recurring_investments_combined.sort(function (a, b) {\n      if (a.period < b.period) return -1;\n      if (a.period > b.period) return 1;\n      return 0;\n    });\n\n    const folded = [recurring_investments_combined[0]];\n\n    for (let i = 1; i < recurring_investments_combined.length; i++) {\n      if (\n        folded[folded.length - 1].period ===\n        recurring_investments_combined[i].period\n      ) {\n        folded[folded.length - 1].amount +=\n          recurring_investments_combined[i].amount;\n      } else {\n        folded.push(recurring_investments_combined[i]);\n      }\n    }\n    recurring_investments_combined = folded;\n\n    let interest_rate_delta =\n      (365 - period + recurring_investments_combined[0].period) / 365;\n    for (let i = 0; i < recurring_investments_combined.length; i++) {\n      if (i > 0) {\n        interest_rate_delta =\n          (recurring_investments_combined[i].period -\n            recurring_investments_combined[i - 1].period) /\n          365;\n      }\n\n      // Apply interest rates/inflation\n      period = recurring_investments_combined[i].period;\n      current_value *= 1 + interest_rate * interest_rate_delta;\n      inflation_multiplier *= 1 + inflation_rate * interest_rate_delta;\n\n      // Deflate the money\n      let deflated_current_value = current_value / inflation_multiplier;\n\n      // Add recurring investment\n      let current_amount = recurring_investments_combined[i].amount;\n      current_amount_invested += current_amount;\n      current_value += current_amount;\n\n      let current_value_in_todays_dollars =\n        deflated_current_value + current_amount;\n      current_amount_invested_in_todays_dollars +=\n        current_amount / inflation_multiplier;\n\n      compound_interest_data.push({\n        year: year,\n        period: period,\n        amount_invested: current_amount_invested,\n        value: current_value,\n        returns: current_value / current_amount_invested - 1,\n        amount_invested_in_todays_dollars:\n          current_amount_invested_in_todays_dollars,\n        value_in_todays_dollars: current_value_in_todays_dollars,\n        returns_in_todays_dollars:\n          current_value_in_todays_dollars /\n            current_amount_invested_in_todays_dollars -\n          1,\n        end_of_year: i === recurring_investments_combined.length - 1, // Last period of the year\n      });\n    }\n  }\n\n  return compound_interest_data;\n}\n","import React from 'react';\nimport { Line } from 'react-chartjs-2';\n\nconst options = {\n  title: {\n    display: true,\n    text: 'VALUE OVER TIME',\n    fontSize: 18,\n    fontFamily: 'Source Sans Pro'\n  },\n  scales: {\n    xAxes: [\n      {\n        scaleLabel: {\n          display: true,\n          labelString: 'Year',\n          fontSize: 16,\n          fontFamily: 'Anonymous Pro',\n        },\n        ticks: {\n          fontFamily: 'Anonymous Pro',\n        },\n      },\n    ],\n    yAxes: [\n      {\n        ticks: {\n          fontFamily: 'Anonymous Pro',\n          beginAtZero: true,\n          callback: (value, index, values) => '$' + value,\n        },\n      },\n    ],\n  },\n}\n\nfunction CompoundInterestTable(props) {\n  var datasets = [\n    {\n      label: 'Value',\n      data: props.data.map(d => Math.round(d.value * 100) / 100),\n      fill: false,\n      backgroundColor: 'rgb(85, 107, 47)',\n      borderColor: 'rgb(85, 107, 47, 0.69)',\n    },\n    {\n      label: 'Amount Invested',\n      data: props.data.map(d => Math.round(d.amount_invested * 100) / 100),\n      fill: false,\n      backgroundColor: 'rgb(127, 127, 127)',\n      borderColor: 'rgba(127, 127, 127, 0.69)',\n    }\n  ]\n\n  if (props.display_detail_inflation) {\n    datasets.push(\n      {\n        label: 'Value (adj.)',\n        data: props.data.map(d => Math.round(d.value_in_todays_dollars * 100) / 100),\n        fill: false,\n        backgroundColor: 'rgb(60, 179, 113)',\n        borderColor: 'rgb(60, 179, 113, 0.69)',\n        borderWidth: 2,\n        pointRadius: 2,\n        pointStyle: 'rectRot'\n      },\n      {\n        label: 'Amount Invested (adj.)',\n        data: props.data.map(d => Math.round(d.amount_invested_in_todays_dollars * 100) / 100),\n        fill: false,\n        backgroundColor: 'rgb(200, 200, 200)',\n        borderColor: 'rgba(200, 200, 200, 0.69)',\n        borderWidth: 2,\n        pointRadius: 2,\n        pointStyle: 'rectRot'\n      }\n    )\n  }\n\n  const data = {\n    labels: props.data.map(d => d.year),\n    datasets: datasets\n  }\n\n  return (\n    <div>\n      <Line data={data} options={options} />\n    </div>\n  );\n}\n\nexport default CompoundInterestTable","import React from \"react\";\n\nvar usd_formatter = new Intl.NumberFormat(\"en-US\", {\n  style: \"currency\",\n  currency: \"USD\",\n  maximumFractionDigits: 2,\n});\n\nvar pct_formatter = new Intl.NumberFormat(\"en-US\", {\n  style: \"percent\",\n  minimumFractionDigits: 1,\n  maximumFractionDigits: 1,\n});\n\nfunction CompoundInterestTable(props) {\n  return (\n    <div>\n      <table className=\"key-stats\">\n        <tbody>\n          <tr>\n            <td>Final Value</td>\n            <td>\n              {usd_formatter.format(props.data[props.data.length - 1].value)}\n            </td>\n          </tr>\n          <tr>\n            <td>Returns</td>\n            <td>\n              {pct_formatter.format(props.data[props.data.length - 1].returns)}\n            </td>\n          </tr>\n        </tbody>\n      </table>\n\n      <br />\n\n      <table className=\"data-table\">\n        <thead>\n          <tr>\n            <td>Year</td>\n            {props.display_detail_period && <td>Period</td>}\n            <td>Amount Invested</td>\n            <td>Value</td>\n            <td>Returns</td>\n            {props.display_detail_inflation && (\n              <>\n                <td>Amount Invested (in today's $)</td>\n                <td>Value (in today's $)</td>\n                <td>Returns (in today's $)</td>\n              </>\n            )}\n          </tr>\n        </thead>\n        <tbody>\n          {props.data.map(\n            (d, i) =>\n              ((!props.display_detail_period && d.end_of_year) ||\n                props.display_detail_period) && (\n                <tr key={i}>\n                  <td>{d.year}</td>\n                  {props.display_detail_period && <td>{d.period}</td>}\n                  <td>{usd_formatter.format(d.amount_invested)}</td>\n                  <td>{usd_formatter.format(d.value)}</td>\n                  <td>{pct_formatter.format(d.returns)}</td>\n                  {props.display_detail_inflation && (\n                    <>\n                      <td>\n                        {usd_formatter.format(\n                          d.amount_invested_in_todays_dollars\n                        )}\n                      </td>\n                      <td>{usd_formatter.format(d.value_in_todays_dollars)}</td>\n                      <td>\n                        {pct_formatter.format(d.returns_in_todays_dollars)}\n                      </td>\n                    </>\n                  )}\n                </tr>\n              )\n          )}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nexport default CompoundInterestTable;\n","import React, { Component } from \"react\";\nimport calc_compound_interest_table from \"./calc.js\";\nimport CompoundInterestGraph from \"./CompoundInterestGraph\";\nimport CompoundInterestTable from \"./CompoundInterestTable\";\n\nclass CompoundInterest extends Component {\n  constructor(props) {\n    super(props);\n\n    this.calc = this.calc.bind(this);\n    this.update_value = this.update_value.bind(this);\n    this.toggle_value = this.toggle_value.bind(this);\n    this.addRecurringInvestment = this.addRecurringInvestment.bind(this);\n    this.removeRecurringInvestment = this.removeRecurringInvestment.bind(this);\n\n    this.state = {\n      initial_amount: 5000,\n      interest_rate: 0.1,\n      inflation_rate: 0.03,\n      num_years: 10,\n      recurring_investments: [{ amount: 1000, period: \"annually\" }],\n      display_detail_period: false,\n      display_detail_inflation: false,\n      data: undefined,\n    };\n  }\n\n  calc() {\n    this.setState({\n      data: calc_compound_interest_table(\n        this.state.initial_amount,\n        this.state.interest_rate,\n        this.state.inflation_rate,\n        this.state.num_years,\n        this.state.recurring_investments.map((investment) => investment.amount),\n        this.state.recurring_investments.map((investment) => investment.period)\n      ),\n    });\n  }\n\n  update_value(key, value) {\n    this.setState({\n      [key]: value,\n    });\n  }\n\n  toggle_value(key) {\n    this.setState({\n      [key]: !this.state[key],\n    });\n  }\n\n  updateValue(index, key, value) {\n    this.setState((prevState) => ({\n      recurring_investments: prevState.recurring_investments.map(\n        (investment, i) =>\n          i === index ? { ...investment, [key]: value } : investment\n      ),\n    }));\n  }\n\n  addRecurringInvestment() {\n    this.setState((prevState) => ({\n      recurring_investments: [\n        ...prevState.recurring_investments,\n        { amount: 1000, period: \"annually\" },\n      ],\n    }));\n  }\n\n  removeRecurringInvestment(index) {\n    this.setState((prevState) => ({\n      recurring_investments: prevState.recurring_investments.filter(\n        (_, i) => i !== index\n      ),\n    }));\n  }\n\n  render() {\n    return (\n      <div className=\"main-content\">\n        <h1>Compound Interest</h1>\n\n        <table className=\"input-table\">\n          <tbody>\n            <tr>\n              <td>\n                <label className=\"input-label\">Initial Investment ($)</label>{\" \"}\n              </td>\n              <td>\n                <input\n                  type=\"number\"\n                  defaultValue={this.state.initial_amount}\n                  className=\"number-input\"\n                  onChange={(e) =>\n                    this.update_value(\"initial_amount\", Number(e.target.value))\n                  }\n                />\n              </td>\n              <td>\n                <label className=\"input-label\">Number of Years</label>{\" \"}\n              </td>\n              <td>\n                <input\n                  type=\"number\"\n                  defaultValue={this.state.num_years}\n                  className=\"number-input\"\n                  onChange={(e) =>\n                    this.update_value(\"num_years\", Number(e.target.value))\n                  }\n                />\n              </td>\n            </tr>\n            <tr>\n              <td>\n                <label className=\"input-label\">Interest Rate (%)</label>{\" \"}\n              </td>\n              <td>\n                <input\n                  type=\"number\"\n                  defaultValue={this.state.interest_rate * 100}\n                  className=\"number-input percentage\"\n                  onChange={(e) =>\n                    this.update_value(\n                      \"interest_rate\",\n                      Number(e.target.value) / 100\n                    )\n                  }\n                />\n              </td>\n              <td>\n                <label className=\"input-label\">Inflation Rate (%)</label>{\" \"}\n              </td>\n              <td>\n                <input\n                  type=\"number\"\n                  defaultValue={this.state.inflation_rate * 100}\n                  className=\"number-input percentage\"\n                  onChange={(e) =>\n                    this.update_value(\n                      \"inflation_rate\",\n                      Number(e.target.value) / 100\n                    )\n                  }\n                />\n              </td>\n            </tr>\n            {this.state.recurring_investments.map((investment, index) => (\n              <tr key={index}>\n                <td>\n                  <label className=\"input-label\">\n                    Recurring Investment ($)\n                  </label>\n                </td>\n                <td>\n                  <input\n                    type=\"number\"\n                    defaultValue={investment.amount}\n                    className=\"number-input\"\n                    onChange={(e) =>\n                      this.updateValue(index, \"amount\", Number(e.target.value))\n                    }\n                  />\n                </td>\n                <td>\n                  <label className=\"input-label\">Every</label>\n                </td>\n                <td>\n                  <select\n                    defaultValue={investment.period}\n                    className=\"select-input\"\n                    onChange={(e) =>\n                      this.updateValue(index, \"period\", e.target.value)\n                    }\n                  >\n                    <option value=\"daily\">Day</option>\n                    <option value=\"weekly\">Week</option>\n                    <option value=\"biweekly\">Two Weeks</option>\n                    <option value=\"monthly\">Month</option>\n                    <option value=\"quarter\">Quarter</option>\n                    <option value=\"annually\">Year</option>\n                  </select>\n                  {index !== 0 && (\n                    <button\n                      className=\"button delete-button\"\n                      onClick={() => this.removeRecurringInvestment(index)}\n                    >\n                      delete\n                    </button>\n                  )}\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n\n        <br />\n        <span className=\"button action-button mr-4\" onClick={this.calc}>\n          Calculate\n        </span>\n\n        <span\n          className={\n            \"button toggle-button mr-4\" +\n            (this.state.display_detail_period ? \" selected\" : \"\")\n          }\n          onClick={() => this.toggle_value(\"display_detail_period\")}\n        >\n          {this.state.display_detail_period ? <>&#9724;</> : <>&#9723;</>} Break\n          Down by Time\n        </span>\n\n        <span\n          className={\n            \"button toggle-button mr-4\" +\n            (this.state.display_detail_inflation ? \" selected\" : \"\")\n          }\n          onClick={() => this.toggle_value(\"display_detail_inflation\")}\n        >\n          {this.state.display_detail_inflation ? <>&#9724;</> : <>&#9723;</>}{\" \"}\n          Compare Against Today's Dollars\n        </span>\n\n        <button\n          className=\"button action-button\"\n          onClick={this.addRecurringInvestment}\n        >\n          Add Recurring Investment\n        </button>\n\n        {this.state.data && (\n          <CompoundInterestGraph\n            data={this.state.data}\n            display_detail_inflation={this.state.display_detail_inflation}\n          />\n        )}\n\n        <br />\n        {this.state.data && (\n          <CompoundInterestTable\n            data={this.state.data}\n            display_detail_period={this.state.display_detail_period}\n            display_detail_inflation={this.state.display_detail_inflation}\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default CompoundInterest;\n","\nimport React from 'react';\n\nexport default function BVRTable(props) {\n  let { mortgageData, rent, buyCosts, equityRent, equityBuy, riskFree, income, taxRate } = props;\n\n  function renderTableRows() {\n    let rows = [];\n    const monthlyIncome = income / 12;\n    let balance = 0;\n    for (let i = 0; i < mortgageData.length; i++) {\n      let roeRent = equityRent * (riskFree / (100 * 12))\n      let roeBuy = equityBuy * (riskFree / (100 * 12))\n      balance += mortgageData[i]['balance'];\n      rows.push(\n        <tr>\n          <td>{i + 1}</td>\n          <td>{rent}</td>\n          <td>{Math.round(roeRent)}</td>\n          <td>{Math.round(equityRent)}</td>\n          <td>{Math.round(buyCosts)}</td>\n          <td>{Math.round(mortgageData[i]['balance'])}</td>\n          <td>{Math.round(roeBuy)}</td>\n          <td>{Math.round(equityBuy + balance)}</td>\n        </tr>\n      );\n      equityRent = equityRent * (1 + riskFree / (100 * 12)) + monthlyIncome * (1 - taxRate / 100) - rent;\n      equityBuy = equityBuy * (1 + riskFree / (100 * 12)) + monthlyIncome * (1 - taxRate / 100) - buyCosts;\n    }\n    return rows;\n  }\n  return <div id=\"table\">\n    <table>\n      <tr>\n        <th>Month</th>\n        <th>Rent</th>\n        <th>ROE</th>\n        <th>Equity Rent</th>\n        <th>Buy Costs</th>\n        <th>Balance</th>\n        <th>ROE</th>\n        <th>Equity Buy</th>\n      </tr>\n      {renderTableRows()}\n    </table>\n  </div>;\n}","import React, { useCallback, useEffect, useState } from 'react';\nimport './buyrent.css';\nimport BVRTable from './BVRTable';\n\nexport default function BuyVsRent() {\n  // Your own parameters\n  const [equity, setEquity] = useState(500000);\n  const [riskFree, setRiskFree] = useState(5);\n  const [numYears, setNumYears] = useState(3);\n  const [income, setIncome] = useState(300000);\n  const [taxRate, setTaxRate] = useState(40);\n\n  // Rent\n  const [rent, setRent] = useState(3500);\n  const [rentersInsurance, setRentersInsurance] = useState(5);\n\n  // Buy\n  const [price, setPrice] = useState(1000000);\n  const [down, setDown] = useState(200000);\n  const [tax, setTax] = useState(1000);\n  const [cc, setCC] = useState(1000);\n  const [mortgageRate, setMortgageRate] = useState(6);\n  const [mortgageLoanTerm, setMortgageLoanTerm] = useState(30);\n  const [isCondo, setIsCondo] = useState(true);\n\n  const getClosingCosts = useCallback((isCondo) => {\n    const bankFees = 800;\n    const flipTax = price * 0.01;\n    const attorney = 2500;\n\n    let total = bankFees + flipTax + attorney;\n\n    if (isCondo) {\n      const mortgageAmount = price - down;\n      const titleInsurance = 0.004 * price;\n      const mortgageTitleInsurance = 0.001 * price;\n      const mortgageTax = (mortgageAmount > 500000) ? 0.01925 * mortgageAmount : 0.018 * mortgageAmount;\n      const titleSearchFee = 895;\n      const deedRecordingFee = 285;\n      const mortgageRecordingFee = 250;\n      const ownerPOARecording = 100;\n      const titleCloser = 300;\n\n      total += titleInsurance + mortgageTitleInsurance + mortgageTax + titleSearchFee + deedRecordingFee + mortgageRecordingFee + ownerPOARecording + titleCloser;\n    } else {\n      const judgmentLienSearch = 450;\n      const financingFee = 500;\n      total += judgmentLienSearch + financingFee;\n    }\n\n    return total;\n  }, [price, down]);\n\n  const [closing, setClosing] = useState(getClosingCosts(isCondo));\n\n  const getEquityReturn = useCallback((isRent = true) => {\n    if (isRent) {\n      return (equity * riskFree / 100) / 12;\n    } else {\n      return ((equity - down) * riskFree / 100) / 12;\n    }\n  }, [equity, riskFree, down]);\n\n  const calculateMortgage = useCallback(() => {\n    const monthlyInterestRate = mortgageRate / (12 * 100);\n    const totalPayments = mortgageLoanTerm * 12;\n\n    let principal = price - down;\n    const numerator = principal * monthlyInterestRate * Math.pow(1 + monthlyInterestRate, totalPayments);\n    const denominator = Math.pow(1 + monthlyInterestRate, totalPayments) - 1;\n\n    const monthlyPayment = numerator / denominator;\n\n    let payments = [];\n    for (let i = 0; i < totalPayments; i++) {\n      let interest = principal * monthlyInterestRate;\n      let balance = monthlyPayment - interest;\n      payments.push(\n        {\n          interest: interest,\n          balance: balance,\n        }\n      );\n      principal -= balance;\n    }\n\n    return payments;\n  }, [price, down, mortgageRate, mortgageLoanTerm])\n\n  const [mortgage, setMortgage] = useState(calculateMortgage())\n\n  const monthlyMortgage = mortgage[0]['interest'] + mortgage[0]['balance'];\n\n  const getRentCost = useCallback(() => {\n    return rent + rentersInsurance;\n  }, [rent, rentersInsurance]);\n\n  const getBuyCost = useCallback(() => {\n    return monthlyMortgage + tax + cc;\n  }, [price, down, mortgageRate, mortgageLoanTerm, tax, cc]);\n\n  const [rentCost, setRentCost] = useState(getRentCost())\n  const [buyCost, setBuyCost] = useState(getBuyCost())\n\n  useEffect(() => {\n    setClosing(getClosingCosts(isCondo));\n  }, [price, down, isCondo, getClosingCosts]);\n\n  useEffect(() => {\n    setRentCost(getRentCost());\n  }, [rent, rentersInsurance, getRentCost]);\n\n  useEffect(() => {\n    setBuyCost(getBuyCost());\n  }, [price, down, tax, cc, closing, numYears, isCondo, getBuyCost]);\n\n  useEffect(() => {\n    setMortgage(calculateMortgage());\n  }, [price, down, mortgageRate, mortgageLoanTerm, calculateMortgage]);\n\n  return (\n    <div className=\"main-content\">\n      <h1>Buy vs. Rent</h1>\n      <div className=\"situation\">\n        <h2>Your Situation</h2>\n        <div className=\"row\">\n          <label className=\"input-label\">Equity</label>\n          <input type=\"number\" className=\"number-input\" value={equity}\n            onChange={e => setEquity(parseInt(e.target.value))}\n          />\n        </div>\n        <div className=\"row\">\n          <label className=\"input-label\">Income</label>\n          <input type=\"number\" className=\"number-input\" value={income}\n            onChange={e => setIncome(parseInt(e.target.value))}\n          />\n        </div>\n        <div className=\"row\">\n          <label className=\"input-label\">Tax Rate</label>\n          <input type=\"number\" className=\"number-input\" value={taxRate}\n            onChange={e => setTaxRate(parseInt(e.target.value))}\n          />\n        </div>\n        <div className=\"row\">\n          <label className=\"input-label\">Risk-Free Rate (%)</label>\n          <input type=\"number\" className=\"number-input\" value={riskFree}\n            onChange={e => setRiskFree(parseInt(e.target.value))}\n          />\n        </div>\n        <div className=\"row\">\n          <label className=\"input-label\">Mortgage Rate (%)</label>\n          <input type=\"number\" className=\"number-input\" value={mortgageRate}\n            onChange={e => setMortgageRate(parseInt(e.target.value))}\n          />\n        </div>\n        <div className=\"row\">\n          <label className=\"input-label\">Mortgage Loan Term (years)</label>\n          <input type=\"number\" className=\"number-input\" value={mortgageLoanTerm}\n            onChange={e => setMortgageLoanTerm(parseInt(e.target.value))}\n          />\n        </div>\n        <div className=\"row\">\n          <label className=\"input-label\">Number of Years to Live</label>\n          <input type=\"number\" className=\"number-input\" value={numYears}\n            onChange={e => setNumYears(parseInt(e.target.value))}\n          />\n        </div>\n      </div>\n      <div className=\"comparison\">\n        <h2>Comparison Monthly</h2>\n        <div className=\"container\">\n          <div id=\"rent\" className=\"col halfwidth\">\n            <div className=\"row\">\n              <label className=\"input-label\">Rent</label>\n              <input type=\"number\" className=\"number-input\" value={rent}\n                onChange={e => setRent(parseInt(e.target.value))}\n              />\n            </div>\n            <div className=\"row\">\n              <label className=\"input-label\">Renter's Insurance</label>\n              <input type=\"number\" className=\"number-input\" value={rentersInsurance}\n                onChange={e => setRentersInsurance(parseInt(e.target.value))}\n              />\n            </div>\n          </div>\n          <div id=\"buy\" className=\"col halfwidth\">\n            <div className=\"row\">\n              <label className=\"input-label\">Condo or Co-op?</label>\n              <select value={isCondo ? \"Condo\" : \"Co-op\"} className='number-input'\n                onChange={e => setIsCondo(e.target.value === \"Condo\")}\n              >\n                <option value=\"Condo\">Condo</option>\n                <option value=\"Co-op\">Co-op</option>\n              </select>\n            </div>\n            <div className=\"row\">\n              <label className=\"input-label\">Purchase Price</label>\n              <input type=\"number\" className=\"number-input\" value={price}\n                onChange={e => setPrice(parseInt(e.target.value))}\n              />\n            </div>\n            <div className=\"row\">\n              <label className=\"input-label\">Down Payment</label>\n              <input type=\"number\" className=\"number-input\" value={down}\n                onChange={e => setDown(parseInt(e.target.value))}\n              />\n            </div>\n            <div className=\"row\">\n              <label className=\"input-label\">Closing</label>\n              <input type=\"number\" className=\"number-input\" value={Math.round(closing)} disabled />\n            </div>\n            <div className=\"row\">\n              <label className=\"input-label\">Mortgage</label>\n              <input type=\"number\" className=\"number-input\" value={Math.round(monthlyMortgage)} disabled\n              />\n            </div>\n            <div className=\"row\">\n              <label className=\"input-label\">Tax</label>\n              <input type=\"number\" className=\"number-input\" value={tax}\n                onChange={e => setTax(parseInt(e.target.value))}\n              />\n            </div>\n            <div className=\"row\">\n              <label className=\"input-label\">CC/Maintenance</label>\n              <input type=\"number\" className=\"number-input\" value={cc}\n                onChange={e => setCC(parseInt(e.target.value))}\n              />\n            </div>\n          </div>\n        </div>\n        <div className='row'>\n          <div className='col halfwidth'>\n            <div className='row'>\n              <label className=\"input-label\">Total Cost</label>\n              <input type=\"number\" className=\"number-input\" disabled value={Math.round(rentCost)} />\n            </div>\n          </div>\n          <div className='col halfwidth'>\n            <div className='row'>\n              <label className=\"input-label\">Total Cost</label>\n              <input type=\"number\" className=\"number-input\" disabled value={Math.round(buyCost)} />\n            </div>\n          </div>\n        </div>\n      </div>\n      <h2>Equity and Income with Rent vs. Buy</h2>\n      <BVRTable mortgageData={mortgage} rent={rentCost} buyCosts={buyCost} equityRent={equity} equityBuy={equity - down - closing} riskFree={riskFree} income={income} taxRate={taxRate} />\n    </div >\n  )\n};","import { React, Component } from 'reactn';\nimport Nav from \"./Nav.js\"\nimport Home from \"./Home.js\"\nimport CompoundInterest from \"./compound-interest/CompoundInterest.js\"\nimport BuyVsRent from \"./buy-vs-rent/BuyVsRent.js\"\nimport \"./App.css\"\nimport './data.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.setGlobal({\n      nav: \"Home\"\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"app-container\">\n        <Nav />\n\n        <div className=\"main\">\n          {\n            {\n              \"Home\": <Home />,\n              \"CompoundInterest\": <CompoundInterest />,\n              \"BuyVsRent\": <BuyVsRent />\n            }[this.global.nav]\n          }\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}