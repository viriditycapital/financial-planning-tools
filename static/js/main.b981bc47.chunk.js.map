{"version":3,"sources":["Nav.js","Home.js","compound-interest/calc.js","compound-interest/CompoundInterestGraph.js","compound-interest/CompoundInterestTable.js","compound-interest/CompoundInterest.js","App.js","reportWebVitals.js","index.js"],"names":["Nav","props","className","this","global","nav","onClick","setGlobal","Component","Home","periods_per_year","daily","weekly","biweekly","monthly","annually","month_name","calc_compound_interest_table","initial_amount","interest_rate","inflation_rate","num_years","recurring_investment","recurring_investment_period","compound_interest_data","push","year","period","amount_invested","value","returns","amount_invested_in_todays_dollars","value_in_todays_dollars","returns_in_todays_dollars","end_of_year","current_amount_invested","current_value","current_amount_invested_in_todays_dollars","inflation_multiplier","ppy","deflated_current_value","current_value_in_todays_dollars","options","title","display","text","fontSize","fontFamily","scales","xAxes","scaleLabel","labelString","ticks","yAxes","beginAtZero","callback","index","values","CompoundInterestTable","datasets","label","data","map","d","Math","round","fill","backgroundColor","borderColor","display_detail_inflation","borderWidth","pointRadius","pointStyle","labels","usd_formatter","Intl","NumberFormat","style","currency","maximumFractionDigits","pct_formatter","minimumFractionDigits","format","length","display_detail_period","i","CompoundInterest","calc","bind","update_value","toggle_value","state","recurring_investment_period_used_for_calc","undefined","setState","key","console","log","type","defaultValue","onChange","e","Number","target","CompoundInterestGraph","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b981bc47.chunk.js","sourcesContent":["import { React, Component } from 'reactn';\r\nimport \"./Nav.css\"\r\n\r\nclass Nav extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"side-bar\">\r\n        <nav className=\"side-nav\">\r\n          <ul className=\"nav-list\">\r\n            <li className={this.global.nav == \"Home\" ? \"selected-nav\" : \"\"}\r\n              onClick={() => this.setGlobal({ nav: \"Home\" })}>\r\n              <a>Home</a></li>\r\n            <li className={this.global.nav == \"CompoundInterest\" ? \"selected-nav\" : \"\"}\r\n              onClick={() => this.setGlobal({ nav: \"CompoundInterest\" })}>\r\n              <a>Compound Interest</a></li>\r\n          </ul>\r\n        </nav>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Nav","import { React, Component } from 'reactn';\r\n\r\nclass Home extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"main-content\">\r\n        <h1>Viridity Financial Planning Tools</h1>\r\n\r\n        <p>Welcome to Viridity's very aesthetic financial planning tools. Use these to get rich. This is not intended to be investment advice.</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;\r\n","var periods_per_year = {\r\n  daily: 365,\r\n  weekly: 52,\r\n  biweekly: 26,\r\n  monthly: 12,\r\n  annually: 1\r\n}\r\n\r\nvar month_name = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\",\"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"]\r\n\r\nexport default function calc_compound_interest_table(\r\n  initial_amount = 0,\r\n  interest_rate = 0.10,\r\n  inflation_rate = 0.03,\r\n  num_years = 50,\r\n  recurring_investment = 0,\r\n  recurring_investment_period = 'annually'\r\n) {\r\n  let compound_interest_data = []\r\n  compound_interest_data.push({\r\n    year: \"-\",\r\n    period: \"-\",\r\n    amount_invested: initial_amount,\r\n    value: initial_amount,\r\n    returns: 0,\r\n    amount_invested_in_todays_dollars: initial_amount,\r\n    value_in_todays_dollars: initial_amount,\r\n    returns_in_todays_dollars: 0,\r\n    end_of_year: true\r\n  })\r\n\r\n  let current_amount_invested = initial_amount\r\n  let current_value = initial_amount\r\n  let current_amount_invested_in_todays_dollars = initial_amount\r\n\r\n  let inflation_multiplier = 1\r\n  let ppy = periods_per_year[recurring_investment_period]\r\n\r\n  for (let year = 1; year <= num_years; year++) {\r\n    for (let period = 1; period <= ppy; period++) {\r\n      // Apply interest rates/inflation before adding recurring investments\r\n      current_value *= (1 + (interest_rate / ppy))\r\n      inflation_multiplier *= (1 + (inflation_rate / ppy))\r\n\r\n      // Deflate the money before adding recurring investment\r\n      let deflated_current_value = current_value / inflation_multiplier\r\n\r\n      current_amount_invested += recurring_investment\r\n      current_value += recurring_investment\r\n\r\n      let current_value_in_todays_dollars = deflated_current_value + recurring_investment\r\n      current_amount_invested_in_todays_dollars += recurring_investment / inflation_multiplier\r\n\r\n      compound_interest_data.push({\r\n        year: year,\r\n        period: recurring_investment_period === \"monthly\" ? month_name[period - 1] : period,\r\n        amount_invested: current_amount_invested,\r\n        value: current_value,\r\n        returns: (current_value / current_amount_invested) - 1,\r\n        amount_invested_in_todays_dollars: current_amount_invested_in_todays_dollars,\r\n        value_in_todays_dollars: current_value_in_todays_dollars,\r\n        returns_in_todays_dollars: (current_value_in_todays_dollars / current_amount_invested_in_todays_dollars) - 1,\r\n        end_of_year: period === ppy\r\n      })\r\n    }\r\n  }\r\n\r\n  return compound_interest_data\r\n}","import React from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\n\r\nconst options = {\r\n  title: {\r\n    display: true,\r\n    text: 'VALUE OVER TIME',\r\n    fontSize: 18,\r\n    fontFamily: 'Source Sans Pro'\r\n  },\r\n  scales: {\r\n    xAxes: [\r\n      {\r\n        scaleLabel: {\r\n          display: true,\r\n          labelString: 'Year',\r\n          fontSize: 16,\r\n          fontFamily: 'Anonymous Pro',\r\n        },\r\n        ticks: {\r\n          fontFamily: 'Anonymous Pro',\r\n        },\r\n      },\r\n    ],\r\n    yAxes: [\r\n      {\r\n        ticks: {\r\n          fontFamily: 'Anonymous Pro',\r\n          beginAtZero: true,\r\n          callback: (value, index, values) => '$' + value,\r\n        },\r\n      },\r\n    ],\r\n  },\r\n}\r\n\r\nfunction CompoundInterestTable(props) {\r\n  var datasets = [\r\n    {\r\n      label: 'Value',\r\n      data: props.data.map(d => Math.round(d.value * 100) / 100),\r\n      fill: false,\r\n      backgroundColor: 'rgb(85, 107, 47)',\r\n      borderColor: 'rgb(85, 107, 47, 0.69)',\r\n    },\r\n    {\r\n      label: 'Amount Invested',\r\n      data: props.data.map(d => Math.round(d.amount_invested * 100) / 100),\r\n      fill: false,\r\n      backgroundColor: 'rgb(127, 127, 127)',\r\n      borderColor: 'rgba(127, 127, 127, 0.69)',\r\n    }\r\n  ]\r\n\r\n  if (props.display_detail_inflation) {\r\n    datasets.push(\r\n      {\r\n        label: 'Value (adj.)',\r\n        data: props.data.map(d => Math.round(d.value_in_todays_dollars * 100) / 100),\r\n        fill: false,\r\n        backgroundColor: 'rgb(60, 179, 113)',\r\n        borderColor: 'rgb(60, 179, 113, 0.69)',\r\n        borderWidth: 2,\r\n        pointRadius: 2,\r\n        pointStyle: 'rectRot'\r\n      },\r\n      {\r\n        label: 'Amount Invested (adj.)',\r\n        data: props.data.map(d => Math.round(d.amount_invested_in_todays_dollars * 100) / 100),\r\n        fill: false,\r\n        backgroundColor: 'rgb(200, 200, 200)',\r\n        borderColor: 'rgba(200, 200, 200, 0.69)',\r\n        borderWidth: 2,\r\n        pointRadius: 2,\r\n        pointStyle: 'rectRot'\r\n      }\r\n    )\r\n  }\r\n\r\n  const data = {\r\n    labels: props.data.map(d => d.year),\r\n    datasets: datasets\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Line data={data} options={options} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CompoundInterestTable","import React from 'react';\r\n\r\nvar usd_formatter = new Intl.NumberFormat('en-US', {\r\n  style: 'currency',\r\n  currency: 'USD',\r\n  maximumFractionDigits: 2\r\n});\r\n\r\nvar pct_formatter = new Intl.NumberFormat('en-US', {\r\n  style: 'percent',\r\n  minimumFractionDigits: 1,\r\n  maximumFractionDigits: 1\r\n});\r\n\r\nfunction CompoundInterestTable(props) {\r\n  return (\r\n    <div>\r\n      <table className=\"key-stats\">\r\n        <tr>\r\n          <td>Final Value</td>\r\n          <td>{usd_formatter.format(props.data[props.data.length - 1].value)}</td>\r\n        </tr>\r\n        <tr>\r\n          <td>Returns</td>\r\n          <td>{pct_formatter.format(props.data[props.data.length - 1].returns)}</td>\r\n        </tr>\r\n      </table>\r\n\r\n      <br />\r\n\r\n      <table className=\"data-table\">\r\n        <thead>\r\n          <tr>\r\n            <td>Year</td>\r\n            {props.display_detail_period &&\r\n              {\r\n                'daily': <td>Day</td>,\r\n                'weekly': <td>Week</td>,\r\n                'biweekly': <td>Period</td>,\r\n                'monthly': <td>Month</td>,\r\n                'annually': <></>,\r\n              }[props.recurring_investment_period]\r\n            }\r\n            <td>Amount Invested</td>\r\n            <td>Value</td>\r\n            <td>Returns</td>\r\n            {props.display_detail_inflation &&\r\n              <>\r\n                <td>Amount Invested (in today's $)</td>\r\n                <td>Value (in today's $)</td>\r\n                <td>Returns (in today's $)</td>\r\n              </>\r\n            }\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {props.data.map((d, i) =>\r\n            ((!props.display_detail_period && d.end_of_year) || props.display_detail_period) &&\r\n            <tr key={i}>\r\n              <td>{d.year}</td>\r\n              {(props.recurring_investment_period !== 'annually' && props.display_detail_period) &&\r\n                <td>{d.period}</td>\r\n              }\r\n              <td>{usd_formatter.format(d.amount_invested)}</td>\r\n              <td>{usd_formatter.format(d.value)}</td>\r\n              <td>{pct_formatter.format(d.returns)}</td>\r\n              {props.display_detail_inflation &&\r\n                <>\r\n                  <td>{usd_formatter.format(d.amount_invested_in_todays_dollars)}</td>\r\n                  <td>{usd_formatter.format(d.value_in_todays_dollars)}</td>\r\n                  <td>{pct_formatter.format(d.returns_in_todays_dollars)}</td>\r\n                </>\r\n              }\r\n            </tr>\r\n          )}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CompoundInterestTable","import React, { Component } from 'react';\r\nimport calc_compound_interest_table from './calc.js'\r\nimport CompoundInterestGraph from './CompoundInterestGraph'\r\nimport CompoundInterestTable from './CompoundInterestTable'\r\n\r\nclass CompoundInterest extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.calc = this.calc.bind(this);\r\n    this.update_value = this.update_value.bind(this);\r\n    this.toggle_value = this.toggle_value.bind(this);\r\n\r\n    this.state = {\r\n      initial_amount: 5000,\r\n      interest_rate: 0.10,\r\n      inflation_rate: 0.03,\r\n      num_years: 10,\r\n      recurring_investment: 1000,\r\n      recurring_investment_period: 'annually',\r\n      recurring_investment_period_used_for_calc: 'annually',\r\n      display_detail_period: false,\r\n      display_detail_inflation: false,\r\n      data: undefined\r\n    }\r\n  }\r\n\r\n  calc() {\r\n    this.setState({\r\n      data: calc_compound_interest_table(\r\n        this.state.initial_amount,\r\n        this.state.interest_rate,\r\n        this.state.inflation_rate,\r\n        this.state.num_years,\r\n        this.state.recurring_investment,\r\n        this.state.recurring_investment_period\r\n      ),\r\n      recurring_investment_period_used_for_calc: this.state.recurring_investment_period\r\n    })\r\n  }\r\n\r\n  update_value(key, value) {\r\n    this.setState({\r\n      [key]: value\r\n    })\r\n  }\r\n\r\n  toggle_value(key) {\r\n    this.setState({\r\n      [key]: !this.state[key]\r\n    })\r\n  }\r\n\r\n  render() {\r\n    console.log(this.state.data)\r\n\r\n    return (\r\n      <div className=\"main-content\">\r\n        <h1>Compound Interest</h1>\r\n\r\n        <table className=\"input-table\">\r\n          <tbody>\r\n            <tr>\r\n              <td>\r\n                <label className=\"input-label\">Initial Investment ($)</label> </td><td>\r\n                <input type=\"number\" defaultValue={this.state.initial_amount} className=\"number-input\"\r\n                  onChange={e => this.update_value(\"initial_amount\", Number(e.target.value))} />\r\n              </td>\r\n              <td>\r\n                <label className=\"input-label\">Number of Years</label> </td><td>\r\n                <input type=\"number\" defaultValue={this.state.num_years} className=\"number-input\"\r\n                  onChange={e => this.update_value(\"num_years\", Number(e.target.value))} />\r\n              </td>\r\n            </tr>\r\n            <tr>\r\n              <td>\r\n                <label className=\"input-label\">Recurring Investment ($)</label> </td><td>\r\n                <input type=\"number\" defaultValue={this.state.recurring_investment} className=\"number-input\"\r\n                  onChange={e => this.update_value(\"recurring_investment\", Number(e.target.value))} />\r\n              </td>\r\n              <td>\r\n                <label className=\"input-label\">Every</label> </td><td>\r\n                <select defaultValue={this.state.recurring_investment_period} className=\"select-input\"\r\n                  onChange={e => this.update_value('recurring_investment_period', e.target.value)}>\r\n                  <option value=\"daily\">Day</option>\r\n                  <option value=\"weekly\">Week</option>\r\n                  <option value=\"biweekly\">Two Weeks</option>\r\n                  <option value=\"monthly\">Month</option>\r\n                  <option value=\"annually\">Year</option>\r\n                </select>\r\n              </td>\r\n            </tr>\r\n            <tr>\r\n              <td>\r\n                <label className=\"input-label\">Interest Rate (%)</label> </td><td>\r\n                <input type=\"number\" defaultValue={this.state.interest_rate * 100} className=\"number-input percentage\"\r\n                  onChange={e => this.update_value(\"interest_rate\", Number(e.target.value) / 100)} />\r\n              </td>\r\n              <td>\r\n                <label className=\"input-label\">Inflation Rate (%)</label> </td><td>\r\n                <input type=\"number\" defaultValue={this.state.inflation_rate * 100} className=\"number-input percentage\"\r\n                  onChange={e => this.update_value(\"inflation_rate\", Number(e.target.value) / 100)} />\r\n              </td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n\r\n        <br />\r\n        <span className=\"button action-button\" onClick={this.calc}>Calculate</span>\r\n\r\n        <span className={\"button toggle-button\" + (this.state.display_detail_period ? \" selected\" : \"\")}\r\n          onClick={() => this.toggle_value(\"display_detail_period\")}>\r\n          {this.state.display_detail_period ? <>&#9724;</> : <>&#9723;</>} Break Down by Time</span>\r\n\r\n        <span className={\"button toggle-button\" + (this.state.display_detail_inflation ? \" selected\" : \"\")}\r\n          onClick={() => this.toggle_value(\"display_detail_inflation\")}>\r\n          {this.state.display_detail_inflation ? <>&#9724;</> : <>&#9723;</>} Compare Against Today's Dollars</span>\r\n\r\n\r\n        {this.state.data &&\r\n          <CompoundInterestGraph\r\n            data={this.state.data}\r\n            display_detail_inflation={this.state.display_detail_inflation} />\r\n        }\r\n\r\n        <br />\r\n        {this.state.data &&\r\n          <CompoundInterestTable\r\n            data={this.state.data}\r\n            recurring_investment_period={this.state.recurring_investment_period_used_for_calc}\r\n            display_detail_period={this.state.display_detail_period}\r\n            display_detail_inflation={this.state.display_detail_inflation} />\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CompoundInterest","import { React, Component } from 'reactn';\nimport Nav from \"./Nav.js\"\nimport Home from \"./Home.js\"\nimport CompoundInterest from \"./compound-interest/CompoundInterest.js\"\nimport \"./App.css\"\nimport './data.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.setGlobal({\n      nav: \"Home\"\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"app-container\">\n        <Nav />\n\n        <div className=\"main\">\n          {\n            {\n              \"Home\": <Home />,\n              \"CompoundInterest\": <CompoundInterest />\n            }[this.global.nav]\n          }\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}